// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	domain "github.com/junminhong/member-center-service/domain"
	"github.com/junminhong/member-center-service/pkg/requester"
	"mime/multipart"

	mock "github.com/stretchr/testify/mock"

	responser "github.com/junminhong/member-center-service/pkg/responser"
)

// MemberUseCase is an autogenerated mock type for the MemberUseCase type
type MemberUseCase struct {
	mock.Mock
}

func (_m *MemberUseCase) Register(request requester.Register) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) Login(request requester.Login) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) ResendEmail(request requester.ResendEmail) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) ResetPassword(request requester.ResetPassword, atomicToken string) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) ForgetPassword(request requester.ForgetPassword) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) GetProfile(atomicToken string) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) EditProfile(atomicToken string, request requester.EditProfile) responser.Response {
	//TODO implement me
	panic("implement me")
}

func (_m *MemberUseCase) UploadMugShot(atomicToken string, file multipart.File, uploadFile *multipart.FileHeader) responser.Response {
	//TODO implement me
	panic("implement me")
}

// Register provides a mock function with given fields: ctx, member
func (_m *MemberUseCase) Register(ctx *gin.Context, member *domain.Member) responser.Response {
	ret := _m.Called(ctx, member)

	var r0 responser.Response
	if rf, ok := ret.Get(0).(func(*gin.Context, *domain.Member) responser.Response); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Get(0).(responser.Response)
	}

	return r0
}
